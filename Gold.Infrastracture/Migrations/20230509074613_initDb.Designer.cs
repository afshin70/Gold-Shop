// <auto-generated />
using System;
using Gold.Infrastracture.EFCoreContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gold.Infrastracture.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230509074613_initDb")]
    partial class initDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Gold.Domain.Entities.AdminActivity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<byte>("ActivityType")
                        .HasColumnType("tinyint");

                    b.Property<byte>("AdminMenuID")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminMenuID");

                    b.HasIndex("UserId");

                    b.ToTable("AdminActivities", "dbo");
                });

            modelBuilder.Entity("Gold.Domain.Entities.AdminMenu", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<byte>("AdminMenuGroupID")
                        .HasColumnType("tinyint");

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("IconName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<byte>("OrderNo")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AdminMenuGroupID");

                    b.ToTable("AdminMenus", "dbo");
                });

            modelBuilder.Entity("Gold.Domain.Entities.AdminMenuGroup", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("IconName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<byte>("OrderNo")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AdminMenuGroups", "dbo");
                });

            modelBuilder.Entity("Gold.Domain.Entities.AuthEntities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastPasswordChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LockDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SecurityStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("UserType")
                        .HasColumnType("tinyint");

                    b.Property<int>("WrongPasswordCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Users", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 100000,
                            FullName = "آراپندار",
                            IsActive = true,
                            IsLocked = false,
                            Mobile = "",
                            PasswordHash = "ssDhi4t9/j1aedeLx28C2g==",
                            PasswordSalt = "61b78f20-c451-4bb2-b5dc-22ac30804331",
                            RegisterDate = new DateTime(2023, 5, 9, 12, 16, 12, 824, DateTimeKind.Local).AddTicks(1521),
                            SecurityStamp = new Guid("6266eab6-9908-46ea-96bf-de2d1981b982"),
                            UserName = "pendarAdmin",
                            UserType = (byte)3,
                            WrongPasswordCount = 0
                        },
                        new
                        {
                            Id = 100001,
                            FullName = "مدیر سیستم",
                            IsActive = true,
                            IsLocked = false,
                            Mobile = "",
                            PasswordHash = "hlTfAQtAZJVjCwR0yHr1DA==",
                            PasswordSalt = "82885a65-99ac-4523-9448-dde2e7f4120d",
                            RegisterDate = new DateTime(2023, 5, 9, 12, 16, 12, 824, DateTimeKind.Local).AddTicks(8936),
                            SecurityStamp = new Guid("b8e684dd-f965-4d0a-801e-e222e49ecb8e"),
                            UserName = "siteAdmin",
                            UserType = (byte)3,
                            WrongPasswordCount = 0
                        });
                });

            modelBuilder.Entity("Gold.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cities", "dbo");
                });

            modelBuilder.Entity("Gold.Domain.Entities.Collateral", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("CollateralTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DocumentId")
                        .HasColumnType("bigint");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CollateralTypeId");

                    b.HasIndex("DocumentId");

                    b.ToTable("Collaterals", "dbo");
                });

            modelBuilder.Entity("Gold.Domain.Entities.CollateralType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CollateralTypes", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "سکه"
                        },
                        new
                        {
                            Id = 2,
                            Title = "گرم"
                        },
                        new
                        {
                            Id = 3,
                            Title = "سند"
                        },
                        new
                        {
                            Id = 4,
                            Title = "چک"
                        },
                        new
                        {
                            Id = 5,
                            Title = "گالری"
                        });
                });

            modelBuilder.Entity("Gold.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("FatherName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("SanaCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers", "dbo");
                });

            modelBuilder.Entity("Gold.Domain.Entities.CustomerMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("DocumentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("installmentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("installmentId");

                    b.ToTable("CustomerMessages", "dbo");
                });

            modelBuilder.Entity("Gold.Domain.Entities.CustomerPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("ConfirmDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DocumentId")
                        .HasColumnType("bigint");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConfirm")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("CustomerPayments", "dbo");
                });

            modelBuilder.Entity("Gold.Domain.Entities.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AdminDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<byte>("DayOfMonth")
                        .HasColumnType("tinyint");

                    b.Property<long?>("DelayAmount")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("date");

                    b.Property<long>("DiscountAmount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("date");

                    b.Property<int>("DocumentNo")
                        .HasColumnType("int");

                    b.Property<int>("GalleryId")
                        .HasColumnType("int");

                    b.Property<long>("InstallmentAmount")
                        .HasColumnType("bigint");

                    b.Property<byte>("InstallmentCount")
                        .HasColumnType("tinyint");

                    b.Property<long>("PrepaymentAmount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("RemainAmount")
                        .HasColumnType("bigint");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SettleDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("SettleRegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GalleryId");

                    b.HasIndex("SellerId");

                    b.ToTable("Documents", "dbo");
                });

            modelBuilder.Entity("Gold.Domain.Entities.EditInformationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("EditInformationRequests", "dbo");
                });

            modelBuilder.Entity("Gold.Domain.Entities.EssentialTel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<string>("RelationShip")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("EssentialTels", "dbo");
                });

            modelBuilder.Entity("Gold.Domain.Entities.Gallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("HasInstallmentSale")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PurchaseDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Galleries", "dbo");
                });

            modelBuilder.Entity("Gold.Domain.Entities.Installment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("DelayDays")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DocumentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<byte>("Number")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("PaymentType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("Installments", "dbo");
                });

            modelBuilder.Entity("Gold.Domain.Entities.LoggingEntities.SystemActivityLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ExtraData")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("RaiseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SystemActivityLog", "dbo");
                });

            modelBuilder.Entity("Gold.Domain.Entities.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Managers", "dbo");
                });

            modelBuilder.Entity("Gold.Domain.Entities.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<long?>("CustomerPaymentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("InstallmentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerPaymentId");

                    b.HasIndex("InstallmentId");

                    b.ToTable("Payments", "dbo");
                });

            modelBuilder.Entity("Gold.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Permissions", "dbo");
                });

            modelBuilder.Entity("Gold.Domain.Entities.PermissionAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte>("AdminMenuId")
                        .HasColumnType("tinyint");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminMenuId");

                    b.HasIndex("PermissionId");

                    b.ToTable("PermissionAccesses", "dbo");
                });

            modelBuilder.Entity("Gold.Domain.Entities.Seller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GalleryId")
                        .HasColumnType("int");

                    b.Property<bool>("HasAccessToRegisterLoan")
                        .HasColumnType("bit");

                    b.Property<string>("ImageName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("ProductRegisterPerHourCount")
                        .HasColumnType("tinyint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GalleryId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Sellers", "dbo");
                });

            modelBuilder.Entity("Gold.Domain.Entities.SendSmsTemp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Token")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SmsTemps", "dbo");
                });

            modelBuilder.Entity("Gold.Domain.Entities.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Type")
                        .IsUnicode(true)
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.ToTable("Settings", "dbo");
                });

            modelBuilder.Entity("Gold.Domain.Entities.SocialNetwork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SocialNetworks", "dbo");
                });

            modelBuilder.Entity("Gold.Domain.Entities.AdminActivity", b =>
                {
                    b.HasOne("Gold.Domain.Entities.AdminMenu", "AdminMenu")
                        .WithMany()
                        .HasForeignKey("AdminMenuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gold.Domain.Entities.AuthEntities.User", "User")
                        .WithMany("AdminActivities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminMenu");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gold.Domain.Entities.AdminMenu", b =>
                {
                    b.HasOne("Gold.Domain.Entities.AdminMenuGroup", "AdminMenuGroup")
                        .WithMany("AdminMenus")
                        .HasForeignKey("AdminMenuGroupID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdminMenuGroup");
                });

            modelBuilder.Entity("Gold.Domain.Entities.Collateral", b =>
                {
                    b.HasOne("Gold.Domain.Entities.CollateralType", "CollateralType")
                        .WithMany("Collaterals")
                        .HasForeignKey("CollateralTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gold.Domain.Entities.Document", "Document")
                        .WithMany("Collaterals")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CollateralType");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Gold.Domain.Entities.Customer", b =>
                {
                    b.HasOne("Gold.Domain.Entities.City", "City")
                        .WithMany("Customers")
                        .HasForeignKey("CityId");

                    b.HasOne("Gold.Domain.Entities.AuthEntities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Gold.Domain.Entities.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gold.Domain.Entities.CustomerMessage", b =>
                {
                    b.HasOne("Gold.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerMessages")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gold.Domain.Entities.Document", "Document")
                        .WithMany("CustomerMessages")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gold.Domain.Entities.Installment", "Installment")
                        .WithMany("CustomerMessages")
                        .HasForeignKey("installmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Customer");

                    b.Navigation("Document");

                    b.Navigation("Installment");
                });

            modelBuilder.Entity("Gold.Domain.Entities.CustomerPayment", b =>
                {
                    b.HasOne("Gold.Domain.Entities.Document", "Document")
                        .WithMany("CustomerPayments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Gold.Domain.Entities.Document", b =>
                {
                    b.HasOne("Gold.Domain.Entities.Customer", "Customer")
                        .WithMany("Documents")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gold.Domain.Entities.Gallery", "Gallery")
                        .WithMany("Documents")
                        .HasForeignKey("GalleryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gold.Domain.Entities.Seller", "Seller")
                        .WithMany("Documents")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Gallery");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Gold.Domain.Entities.EditInformationRequest", b =>
                {
                    b.HasOne("Gold.Domain.Entities.Customer", "Customer")
                        .WithMany("EditInformationRequests")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Gold.Domain.Entities.EssentialTel", b =>
                {
                    b.HasOne("Gold.Domain.Entities.Customer", "Customer")
                        .WithMany("EssentialTels")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Gold.Domain.Entities.Installment", b =>
                {
                    b.HasOne("Gold.Domain.Entities.Document", "Document")
                        .WithMany("Installments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Gold.Domain.Entities.Manager", b =>
                {
                    b.HasOne("Gold.Domain.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gold.Domain.Entities.AuthEntities.User", "User")
                        .WithOne("Manager")
                        .HasForeignKey("Gold.Domain.Entities.Manager", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gold.Domain.Entities.Payment", b =>
                {
                    b.HasOne("Gold.Domain.Entities.CustomerPayment", "CustomerPayment")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerPaymentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Gold.Domain.Entities.Installment", "Installment")
                        .WithMany("Payments")
                        .HasForeignKey("InstallmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CustomerPayment");

                    b.Navigation("Installment");
                });

            modelBuilder.Entity("Gold.Domain.Entities.PermissionAccess", b =>
                {
                    b.HasOne("Gold.Domain.Entities.AdminMenu", "AdminMenu")
                        .WithMany("PermissionAccesses")
                        .HasForeignKey("AdminMenuId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gold.Domain.Entities.Permission", "Permission")
                        .WithMany("PermissionAccesses")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdminMenu");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Gold.Domain.Entities.Seller", b =>
                {
                    b.HasOne("Gold.Domain.Entities.Gallery", "Gallery")
                        .WithMany("Sellers")
                        .HasForeignKey("GalleryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gold.Domain.Entities.AuthEntities.User", "User")
                        .WithOne("Seller")
                        .HasForeignKey("Gold.Domain.Entities.Seller", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gallery");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gold.Domain.Entities.AdminMenu", b =>
                {
                    b.Navigation("PermissionAccesses");
                });

            modelBuilder.Entity("Gold.Domain.Entities.AdminMenuGroup", b =>
                {
                    b.Navigation("AdminMenus");
                });

            modelBuilder.Entity("Gold.Domain.Entities.AuthEntities.User", b =>
                {
                    b.Navigation("AdminActivities");

                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Manager")
                        .IsRequired();

                    b.Navigation("Seller")
                        .IsRequired();
                });

            modelBuilder.Entity("Gold.Domain.Entities.City", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Gold.Domain.Entities.CollateralType", b =>
                {
                    b.Navigation("Collaterals");
                });

            modelBuilder.Entity("Gold.Domain.Entities.Customer", b =>
                {
                    b.Navigation("CustomerMessages");

                    b.Navigation("Documents");

                    b.Navigation("EditInformationRequests");

                    b.Navigation("EssentialTels");
                });

            modelBuilder.Entity("Gold.Domain.Entities.CustomerPayment", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Gold.Domain.Entities.Document", b =>
                {
                    b.Navigation("Collaterals");

                    b.Navigation("CustomerMessages");

                    b.Navigation("CustomerPayments");

                    b.Navigation("Installments");
                });

            modelBuilder.Entity("Gold.Domain.Entities.Gallery", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Sellers");
                });

            modelBuilder.Entity("Gold.Domain.Entities.Installment", b =>
                {
                    b.Navigation("CustomerMessages");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Gold.Domain.Entities.Permission", b =>
                {
                    b.Navigation("PermissionAccesses");
                });

            modelBuilder.Entity("Gold.Domain.Entities.Seller", b =>
                {
                    b.Navigation("Documents");
                });
#pragma warning restore 612, 618
        }
    }
}
